{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","confirmed","recovered","deaths","countries","getCountryData","bind","this","getData","Axios","get","respApi","respCountries","data","map","country","name","setState","value","e","target","respCountry","response","status","i","key","className","href","Date","onChange","renderCountryOptions","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUA6HeA,G,wDAvHb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAGNC,MAAO,CACLC,UAAU,EACVC,UAAU,EACVC,OAAO,EACPC,UAAU,IANZ,EAAKC,eAAgB,EAAKA,eAAeC,KAApB,gBAFL,E,gEAahBC,KAAKC,Y,oKAIeC,IAAMC,IAAI,kC,cAA1BC,E,gBACsBF,IAAMC,IAAI,4C,OAAhCE,E,OACAR,EAAYQ,EAAcC,KAAKT,UAAUU,KAAI,SAAAC,GACjD,OAAOA,EAAQC,QAEjBT,KAAKU,SAAS,CACZhB,UAAWU,EAAQE,KAAKZ,UAAUiB,MAClChB,UAAWS,EAAQE,KAAKX,UAAUgB,MAClCf,OAAQQ,EAAQE,KAAKV,OAAOe,MAC5Bd,UAAUA,I,oLAIOe,G,0EACG,cAAnBA,EAAEC,OAAOF,M,yCACHX,KAAKC,W,gCAGYC,IAAMC,IAAN,mDAAsDS,EAAEC,OAAOF,Q,OAAnFG,E,OACPd,KAAKU,SAAS,CACbhB,UAAWoB,EAAYR,KAAKZ,UAAUiB,MACtChB,UAAWmB,EAAYR,KAAKX,UAAUgB,MACtCf,OAAQkB,EAAYR,KAAKV,OAAOe,Q,gDAIH,MAAxB,KAAII,SAASC,QAChBhB,KAAKU,SAAS,CACZhB,UAAW,8BACXC,UAAW,gBACXC,OAAQ,kB,6JAMZ,OAAOI,KAAKP,MAAMI,UAAUU,KAAI,SAACC,EAAQS,GACrC,OAAO,4BAAQC,IAAKD,GAAIT,Q,+BAMtB,OACI,6BACI,yBAAKW,UAAU,oBACzB,wBAAIA,UAAU,YACV,4BAAI,uBAAGC,KAAK,IAAR,UACJ,4BAAI,uBAAGA,KAAK,+BAAR,WACJ,4BAAI,uBAAGA,KAAK,8CAAR,YACJ,wBAAID,UAAU,QAAO,uBAAGC,KAAK,gCAAR,cAGvB,yBAAKD,UAAU,cACX,+BAEC,wBAAIA,UAAU,WAAd,yBACA,6BACA,2CAAkBE,QACjB,4BAAQF,UAAU,WAAWG,SAAUtB,KAAKF,gBAC1C,6CACCE,KAAKuB,wBAGR,mFACA,yGACR,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,iBACT,wBAAIA,UAAU,QAAd,mBACA,uBAAGA,UAAU,8BACf,wBAAIA,UAAU,SAASnB,KAAKP,MAAMC,YAGtC,yBAAKyB,UAAU,iBACf,wBAAIA,UAAU,QAAd,mBACA,uBAAGA,UAAU,2BACT,4BAAKnB,KAAKP,MAAME,YAGpB,yBAAKwB,UAAU,cACb,wBAAIA,UAAU,QAAd,gBACA,uBAAGA,UAAU,+BACX,4BAAKnB,KAAKP,MAAMG,UAGpB,4BACA,gGAGC,kDAAuB,uCAAvB,KAEA,sDAEA,uBAAGuB,UAAU,QAAQC,KAAK,8CAA6C,uBAAGD,UAAU,kCACpF,uBAAGA,UAAU,QAAQC,KAAK,+BAA8B,uBAAGD,UAAU,8B,GAhH5DK,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9db5044d.chunk.js","sourcesContent":["import React ,{ Component } from 'react';\nimport Axios from 'axios';\nimport './style.css'\n\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.getCountryData =this.getCountryData.bind(this);\n  }\n    state ={\n      confirmed:0,\n      recovered:0,\n      deaths:0,\n      countries:[]\n    }\n\n\ncomponentDidMount(){\n    this.getData();\n}\n\nasync getData(){\n  const respApi = await Axios.get(\"https://covid19.mathdro.id/api\");\n  const respCountries = await Axios.get(\"https://covid19.mathdro.id/api/countries\");\n  const countries = respCountries.data.countries.map(country => {\n    return country.name;\n  });\n  this.setState({\n    confirmed: respApi.data.confirmed.value,\n    recovered: respApi.data.recovered.value,\n    deaths: respApi.data.deaths.value,\n    countries:countries\n  });\n}\n\nasync getCountryData(e){\n  if(e.target.value === \"WorldWide\"){\n    return this.getData();\n  }\n  try{\n  const respCountry = await Axios.get(`https://covid19.mathdro.id/api/countries/${e.target.value}`);\n this.setState({\n  confirmed: respCountry.data.confirmed.value,\n  recovered: respCountry.data.recovered.value,\n  deaths: respCountry.data.deaths.value,\n })\n}\n  catch(err){\n    if(err.response.status === 404)\n    this.setState({ \n      confirmed: \"No tests has been conducted\",\n      recovered: \"No data Found\",\n      deaths: \"No Data Found\"\n     })\n  }\n}\n\nrenderCountryOptions(){\n  return this.state.countries.map((country,i)=>{\n      return <option key={i}>{country}</option>\n  });\n}\n\n\n    render(){\n        return (\n            <div>\n                <nav className=\"zone blue sticky\">\n      <ul className=\"main-nav\">\n          <li><a href=\"\">About</a></li>\n          <li><a href=\"https://github.com/nitink66\">GitHub</a></li>\n          <li><a href=\"https://www.instagram.com/rather_be_nitin/\">Connect</a></li>\n          <li className=\"push\"><a href=\"mailto:nitink61996@gmail.com\">Contact</a></li>\n  </ul>\n  </nav>\n        <div className=\"container1\">\n            <img></img>\n          </div>\n             <h1 className=\"heading\">Corona Global Updates</h1>\n             <br></br>\n             <p>Last Updated { Date() }</p>\n              <select className=\"dropdown\" onChange={this.getCountryData}>\n                <option>WorldWide</option>\n                {this.renderCountryOptions()}\n\n              </select>\n              <p> By default the WorldWide reports is being displayed</p>\n              <p>*select the country to view the Updates about the virus infection/recovery</p>\n      <div className=\"flex\">\n        <div className=\"box confirmed\">\n              <h2 className=\"case\">Confirmed Cases</h2>\n              <i className=\"fas fa-user-injured fa-6x\"></i>\n            <h3 className=\"case1\">{this.state.confirmed}</h3>\n        </div>\n\n        <div className=\"box recovered\">\n        <h2 className=\"case\">Recovered Cases</h2>\n        <i className=\"fas fa-heartbeat fa-6x\"></i>\n            <h3>{this.state.recovered}</h3>\n        </div>\n\n        <div className=\"box deaths\">\n          <h2 className=\"case\">Deaths Cases</h2>\n          <i className=\"fas fa-radiation-alt fa-6x\"></i>\n            <h3>{this.state.deaths}</h3>\n        </div>\n        </div>\n        <p></p>\n        <p> Note :\n         All data is being Served by John Hopkins University CSSE </p>\n\n         <p>API LICENSED TO MIT <span> &copy;</span> </p>\n\n         <p>Developed by Nitin &copy;</p>\n         \n         <a className=\"insta\" href=\"https://www.instagram.com/rather_be_nitin/\"><i className=\" fab fa-instagram fa-4x grow\"></i></a>\n         <a className=\"insta\" href=\"https://github.com/nitink66\"><i className=\"fab fa-github fa-4x\"></i></a>\n         \n        </div>\n            \n    );} \n\n   }\n\nexport default App;\n\n\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}